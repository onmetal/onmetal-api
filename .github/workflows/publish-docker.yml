on:
  workflow_call:
    inputs:
      image-name:
        description: "Name of the image under ghcr.io/${{ github.repository_owner }}"
        required: true
        type: string
      context:
        description: "Context (path) to run the docker build in"
        required: false
        default: "."
        type: string
      file:
        description: "Path to dockerfile"
        required: false
        type: string

jobs:
  buildAndPush:
    if: ${{ github.event.label.name == 'ok-to-image' }} || ${{ github.event.label.name == 'ok-to-üê≥' }} || ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}
          tags: |
            type=semver,pattern={{version}}
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Set up Docker Buildx
        timeout-minutes: 5
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        timeout-minutes: 40
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file || format('{0}/{1}', inputs.context, inputs.file) }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ matrix.image.target }}
